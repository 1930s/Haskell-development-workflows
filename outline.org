* TODO:
  - [ ] Write title and summary for webinar
    - TITLE: Development Workflows in Haskell
    - DESCRIPTION: In this Webinar, Roman Gonzalez will help you take your
      workflow skills to the next level by exploring different approaches to
      Haskell development. From compiling a full application whenever you save a
      file, to experiment with in-progress code drafts over a REPL; we will
      explore the benefits of REPL driven development and how to easily
      integrate this to your everyday routine.
  - [ ] Send to Michael and Rob
  - [ ] 15 hours budgeted

* Target Audience
  :PROPERTIES:
  :ID:       72397335-0e17-4ac5-80dc-6211c69cb051
  :CREATED:  <2018-08-28 Tue 15:28>
  :END:
  - [ ] New people on-boarding to Haskell?
  - [X] (or) Intermidiate People that want to up their Haskell development game?

* Supported OS
  :PROPERTIES:
  :ID:       b2e6a2c8-9713-40d4-848e-62046fd55d9b
  :CREATED:  <2018-08-28 Tue 15:45>
  :END:
  - [ ] Should we cover Windows?
  - [X] Works on my machine

* Supported Editors
  :PROPERTIES:
  :ID:       18ea3df2-b066-466a-8fda-4d4e12963062
  :CREATED:  <2018-08-28 Tue 16:49>
  :END:
  - [X] Editor agnostic (only stack and ghcid)

  - Emacs   (intero workflow)
  - VSCode  (???)
  - Atom    (???)
  - Sublime (???)
  - Vim     (???)
  - hie extension (???)

* New people on-boarding to Haskell
  :PROPERTIES:
  :ID:       d779d6b4-b072-4262-8a6c-f7f98fe7e64b
  :CREATED:  <2018-08-28 Tue 15:49>
  :END:
  - Editor helpers
    - intero
    - hie

  - Differences between compile and interpreted
    + what da you know? Haskell supports both!
    + important differences between compiled and interpreted
      + Generated files from cabal
      + C files interactions
      + Template Haskell

  - Interpreted languages come with a REPL

  - Project Development

    - Workflows via compilation
      + Using ~stack build --file-watch --fast~ to build and run programs
        - Demonstrate how changes in the file kicks compilation and _linking_

      + Using ~stack build --file-watch --fast --exec package-program~
        - Demonstrate how changes in the file kicks compilation, and then
          execute the project's program gain
        - Cannot execute for servers
        - For short lived programs
        - TODO: --auto-kill functionality in stack

      + Using ~stack test --no-rerun-tests --fast --file-watch~ to run test suites on changes
        - Demonstrate how changes execute the project's test-suite

      + Disadvanteges of using compilation workflow
        - No chance to experiment with on-the fly code
        - Likely to have slow feedback loop on big project (linking time)

    - Workflows via REPL
      + Using ~stack repl~ or ~stack ghci~? <- ask chris about this
        - Running arbitrary functions in a module (testing)
          + talk about ~:t~, ~:i~ and ~:browse~
          + talk about ~:set +s~ and ~:set -t~
          + TODO: investigate follow-to-symbol functionality from ghci

        - Running your application's main
          + Killing the long living application in the REPL

        - Running your application's test-suite
          + Oh noes, test-suite dependencies are not inside the repl
          + Demonstrate how to load more than one target at a time (via ~stack
            ide targets~)

        - Disadvanteges of using ~stack repl~
          + No automatic reload of changes on file save

      + Using ~ghcid~
        - Running ~ghcid --command 'stack repl'~
        - Similar to compiled workflow, just a bit faster
        - Supporting files with ~TemplateHaskell~ "-fobject-code"
        - Executing the application inside ghcid's REPL environment via ~--test~
        - Disadvanteges of using ~ghcid~
          + No direct interactions with the REPL environment
          + Generated files from cabal (~cabal_macros.h~)
          + C files interactions

      + Disadvantages of using REPL driven development
        - Running long lived servers: Your application might not clean up after
          itself
          + Port already allocated
          + GHCId memory bloat up

* References
  :PROPERTIES:
  :ID:       56961404-200d-41f2-a776-02e675ec1a51
  :CREATED:  <2018-08-28 Tue 15:27>
  :END:
  * Multiple Editors
    - https://github.com/haskell/haskell-ide-engine/#installation
    - https://github.com/ndmitchell/ghcid
  * VSCode
    - https://medium.com/@dogwith1eye/setting-up-haskell-in-vs-code-on-macos-d2cc1ce9f60a
  * Sublime
    - https://github.com/SublimeHaskell/SublimeHaskell
